<?php

//----------------------------------------------------------------------
//
//  Copyright (C) 2015 Artem Rodygin
//
//  This file is part of Linode API Client Library for PHP.
//
//  You should have received a copy of the GNU General Public License
//  along with the library. If not, see <http://www.gnu.org/licenses/>.
//
//----------------------------------------------------------------------

namespace Linode\Linode;

use Linode\BaseLinodeApi;

/**
 * This class is autogenerated.
 *
 * @version Linode API v3.3
 */
class Disk extends BaseLinodeApi
{
    /**
     *
     *
     * @param   boolean $isReadOnly         [optional] Enable forced read-only for this Disk
     * @param   string  $rootPass           [optional]
     * @param   string  $Label              [required] The display label for this Disk
     * @param   string  $rootSSHKey         [optional]
     * @param   integer $FromDistributionID [optional]
     * @param   integer $Size               [required] The size in MB of this Disk.
     * @param   integer $LinodeID           [required]
     * @param   string  $Type               [required] The formatted type of this disk.  Valid types are: ext3, ext4, swap, raw
     *
     * @return  array
     */
    public function create($isReadOnly = null, $rootPass = null, $Label = null, $rootSSHKey = null, $FromDistributionID = null, $Size = null, $LinodeID = null, $Type = null)
    {
        return $this->call('linode.disk.create', array(
            'isReadOnly'         => $isReadOnly,
            'rootPass'           => $rootPass,
            'Label'              => $Label,
            'rootSSHKey'         => $rootSSHKey,
            'FromDistributionID' => $FromDistributionID,
            'Size'               => $Size,
            'LinodeID'           => $LinodeID,
            'Type'               => $Type,
        ));
    }

    /**
     *
     *
     * @param   string  $Label          [required] The label of this new disk image
     * @param   string  $rootSSHKey     [optional] Optionally sets this string into /root/.ssh/authorized_keys upon distribution configuration.
     * @param   integer $Size           [required] Size of this disk image in MB
     * @param   integer $DistributionID [required] The DistributionID to create this disk from.  Found in avail.distributions()
     * @param   integer $LinodeID       [required]
     * @param   string  $rootPass       [required] The root user's password
     *
     * @return  array
     */
    public function createFromDistribution($Label, $rootSSHKey = null, $Size = null, $DistributionID = null, $LinodeID = null, $rootPass = null)
    {
        return $this->call('linode.disk.createfromdistribution', array(
            'Label'          => $Label,
            'rootSSHKey'     => $rootSSHKey,
            'Size'           => $Size,
            'DistributionID' => $DistributionID,
            'LinodeID'       => $LinodeID,
            'rootPass'       => $rootPass,
        ));
    }

    /**
     * Creates a new disk from a previously imagized disk.
     *
     * @param   string  $Label      [optional] The label of this new disk image
     * @param   string  $rootSSHKey [optional] Optionally sets this string into /root/.ssh/authorized_keys upon image deployment
     * @param   integer $size       [optional] The size of the disk image to creates. Defaults to the minimum size required for the requested image
     * @param   integer $LinodeID   [required] Specifies the Linode to deploy on to
     * @param   string  $rootPass   [optional] Optionally sets the root password at deployment time. If a password is not provided the existing root password of the frozen image will not be modified
     * @param   integer $ImageID    [required] The ID of the frozen image to deploy from
     *
     * @return  array
     */
    public function createFromImage($Label = null, $rootSSHKey = null, $size = null, $LinodeID = null, $rootPass = null, $ImageID = null)
    {
        return $this->call('linode.disk.createfromimage', array(
            'Label'      => $Label,
            'rootSSHKey' => $rootSSHKey,
            'size'       => $size,
            'LinodeID'   => $LinodeID,
            'rootPass'   => $rootPass,
            'ImageID'    => $ImageID,
        ));
    }

    /**
     *
     *
     * @param   string  $StackScriptUDFResponses [required] JSON encoded name/value pairs, answering this StackScript's User Defined Fields
     * @param   integer $DistributionID          [required] Which Distribution to apply this StackScript to.  Must be one from the script's DistributionIDList
     * @param   string  $rootPass                [required] The root user's password
     * @param   string  $rootSSHKey              [optional] Optionally sets this string into /root/.ssh/authorized_keys upon distribution configuration.
     * @param   string  $Label                   [required] The label of this new disk image
     * @param   integer $Size                    [required] Size of this disk image in MB
     * @param   integer $LinodeID                [required]
     * @param   integer $StackScriptID           [required] The StackScript to create this image from
     *
     * @return  array
     */
    public function createFromStackScript($StackScriptUDFResponses, $DistributionID, $rootPass, $rootSSHKey = null, $Label = null, $Size = null, $LinodeID = null, $StackScriptID = null)
    {
        return $this->call('linode.disk.createfromstackscript', array(
            'StackScriptUDFResponses' => $StackScriptUDFResponses,
            'DistributionID'          => $DistributionID,
            'rootPass'                => $rootPass,
            'rootSSHKey'              => $rootSSHKey,
            'Label'                   => $Label,
            'Size'                    => $Size,
            'LinodeID'                => $LinodeID,
            'StackScriptID'           => $StackScriptID,
        ));
    }

    /**
     *
     *
     * @param   integer $LinodeID [required]
     * @param   integer $DiskID   [required]
     *
     * @return  array
     */
    public function delete($LinodeID, $DiskID)
    {
        return $this->call('linode.disk.delete', array(
            'LinodeID' => $LinodeID,
            'DiskID'   => $DiskID,
        ));
    }

    /**
     * Performs a bit-for-bit copy of a disk image.
     *
     * @param   integer $LinodeID [required]
     * @param   integer $DiskID   [required]
     *
     * @return  array
     */
    public function duplicate($LinodeID, $DiskID)
    {
        return $this->call('linode.disk.duplicate', array(
            'LinodeID' => $LinodeID,
            'DiskID'   => $DiskID,
        ));
    }

    /**
     *
     *
     * @param   integer $LinodeID [required]
     * @param   integer $DiskID   [optional]
     *
     * @return  array
     */
    public function getList($LinodeID, $DiskID = null)
    {
        return $this->call('linode.disk.list', array(
            'LinodeID' => $LinodeID,
            'DiskID'   => $DiskID,
        ));
    }

    /**
     * Creates a gold-master image for future deployments
     *
     * @param   string  $Label       [optional] Sets the name of the image shown in the base image list, defaults to the source image label
     * @param   string  $Description [optional] An optional description of the created image
     * @param   integer $LinodeID    [required] Specifies the source Linode to create the image from
     * @param   integer $DiskID      [required] Specifies the source Disk to create the image from
     *
     * @return  array
     */
    public function imagize($Label = null, $Description = null, $LinodeID = null, $DiskID = null)
    {
        return $this->call('linode.disk.imagize', array(
            'Label'       => $Label,
            'Description' => $Description,
            'LinodeID'    => $LinodeID,
            'DiskID'      => $DiskID,
        ));
    }

    /**
     *
     *
     * @param   integer $size     [required] The requested new size of this Disk in MB
     * @param   integer $LinodeID [required]
     * @param   integer $DiskID   [required]
     *
     * @return  array
     */
    public function resize($size, $LinodeID, $DiskID)
    {
        return $this->call('linode.disk.resize', array(
            'size'     => $size,
            'LinodeID' => $LinodeID,
            'DiskID'   => $DiskID,
        ));
    }

    /**
     *
     *
     * @param   string  $Label      [optional] The display label for this Disk
     * @param   boolean $isReadOnly [optional] Enable forced read-only for this Disk
     * @param   integer $LinodeID   [optional]
     * @param   integer $DiskID     [required]
     *
     * @return  array
     */
    public function update($Label = null, $isReadOnly = null, $LinodeID = null, $DiskID = null)
    {
        return $this->call('linode.disk.update', array(
            'Label'      => $Label,
            'isReadOnly' => $isReadOnly,
            'LinodeID'   => $LinodeID,
            'DiskID'     => $DiskID,
        ));
    }
}
