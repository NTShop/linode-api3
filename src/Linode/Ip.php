<?php

//----------------------------------------------------------------------
//
//  Copyright (C) 2015 Artem Rodygin
//
//  This file is part of Linode API Client Library for PHP.
//
//  You should have received a copy of the GNU General Public License
//  along with the library. If not, see <http://www.gnu.org/licenses/>.
//
//----------------------------------------------------------------------

namespace Linode\Linode;

use Linode\BaseLinodeApi;

/**
 * This class is autogenerated.
 *
 * @version Linode API v3.3
 */
class Ip extends BaseLinodeApi
{
    /**
     * Assigns a Private IP to a Linode.
     * Returns the IPAddressID that was added.
     *
     * @param   integer $LinodeID [required]
     *
     * @return  array
     */
    public function addPrivate($LinodeID)
    {
        return $this->call('linode.ip.addprivate', array(
            'LinodeID' => $LinodeID,
        ));
    }

    /**
     * Assigns a Public IP to a Linode.
     * Returns the IPAddressID and IPAddress that was added.
     *
     * @param   integer $LinodeID [required] The LinodeID of the Linode that will be assigned an additional public IP address
     *
     * @return  array
     */
    public function addPublic($LinodeID)
    {
        return $this->call('linode.ip.addpublic', array(
            'LinodeID' => $LinodeID,
        ));
    }

    /**
     * Returns the IP addresses of all Linodes you have access to.
     *
     * @param   integer $IPAddressID [optional] If specified, limits the result to this IPAddressID
     * @param   integer $LinodeID    [optional] If specified, limits the result to this LinodeID
     *
     * @return  array
     */
    public function getList($IPAddressID = null, $LinodeID = null)
    {
        return $this->call('linode.ip.list', array(
            'IPAddressID' => $IPAddressID,
            'LinodeID'    => $LinodeID,
        ));
    }

    /**
     * Sets the rDNS name of a Public IP.
     * Returns the IPAddressID and IPAddress that were updated.
     *
     * @param   string  $Hostname    [required] The hostname to set the reverse DNS to
     * @param   integer $IPAddressID [required] The IPAddressID of the address to update
     *
     * @return  array
     */
    public function setReverseDNS($Hostname, $IPAddressID)
    {
        return $this->call('linode.ip.setrdns', array(
            'Hostname'    => $Hostname,
            'IPAddressID' => $IPAddressID,
        ));
    }

    /**
     * Exchanges Public IP addresses between two Linodes within a Datacenter.
     * The destination of the IP Address can be designated by either the toLinodeID or withIPAddressID parameter.
     * Returns the resulting relationship of the Linode and IP Address parameters.
     * When performing a one directional swap, the source is represented by the first of the two resultant array members.
     *
     * @param   integer $toLinodeID      [optional] The LinodeID of the Linode where IPAddressID will be transfered
     * @param   integer $IPAddressID     [required] The IPAddressID of an IP Address to transfer or swap
     * @param   integer $withIPAddressID [optional] The IP Address ID to swap
     *
     * @return  array
     */
    public function swap($toLinodeID = null, $IPAddressID = null, $withIPAddressID = null)
    {
        return $this->call('linode.ip.swap', array(
            'toLinodeID'      => $toLinodeID,
            'IPAddressID'     => $IPAddressID,
            'withIPAddressID' => $withIPAddressID,
        ));
    }
}
