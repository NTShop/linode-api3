<?php

//----------------------------------------------------------------------
//
//  Copyright (C) 2015 Artem Rodygin
//
//  This file is part of Linode API Client Library for PHP.
//
//  You should have received a copy of the GNU General Public License
//  along with the library. If not, see <http://www.gnu.org/licenses/>.
//
//----------------------------------------------------------------------

namespace Linode;

use Linode\BaseLinodeApi;

/**
 * This class is autogenerated.
 *
 * @version Linode API v3.3
 */
class NodeBalancer extends BaseLinodeApi
{
    /**
     *
     *
     * @param   string  $Label              [optional] This NodeBalancer's label
     * @param   integer $ClientConnThrottle [optional] To help mitigate abuse, throttle connections per second, per client IP. 0 to disable. Max of 20.
     * @param   integer $PaymentTerm        [optional] Subscription term in months for prepaid customers.  One of: 1, 12, or 24
     * @param   integer $DatacenterID       [required] The DatacenterID from avail.datacenters() where you wish to place this new NodeBalancer
     *
     * @return  array
     */
    public function create($Label = null, $ClientConnThrottle = null, $PaymentTerm = null, $DatacenterID = null)
    {
        return $this->call('nodebalancer.create', array(
            'Label'              => $Label,
            'ClientConnThrottle' => $ClientConnThrottle,
            'PaymentTerm'        => $PaymentTerm,
            'DatacenterID'       => $DatacenterID,
        ));
    }

    /**
     * Immediately removes a NodeBalancer from your account and issues a pro-rated credit back to your account, if applicable.
     *
     * @param   integer $NodeBalancerID [required] The NodeBalancerID to delete
     *
     * @return  array
     */
    public function delete($NodeBalancerID)
    {
        return $this->call('nodebalancer.delete', array(
            'NodeBalancerID' => $NodeBalancerID,
        ));
    }

    /**
     * Returns a list of NodeBalancers this user has access or delete to, including their properties
     *
     * @param   integer $NodeBalancerID [optional] Limits the list to the specified NodeBalancerID
     *
     * @return  array
     */
    public function getList($NodeBalancerID = null)
    {
        return $this->call('nodebalancer.list', array(
            'NodeBalancerID' => $NodeBalancerID,
        ));
    }

    /**
     * Updates a NodeBalancer's properties
     *
     * @param   string  $Label              [optional] This NodeBalancer's label
     * @param   integer $ClientConnThrottle [optional] To help mitigate abuse, throttle connections per second, per client IP. 0 to disable. Max of 20.
     * @param   integer $NodeBalancerID     [required]
     *
     * @return  array
     */
    public function update($Label = null, $ClientConnThrottle = null, $NodeBalancerID = null)
    {
        return $this->call('nodebalancer.update', array(
            'Label'              => $Label,
            'ClientConnThrottle' => $ClientConnThrottle,
            'NodeBalancerID'     => $NodeBalancerID,
        ));
    }
}
