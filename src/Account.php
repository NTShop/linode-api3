<?php

//----------------------------------------------------------------------
//
//  Copyright (C) 2015 Artem Rodygin
//
//  This file is part of Linode API Client Library for PHP.
//
//  You should have received a copy of the GNU General Public License
//  along with the library. If not, see <http://www.gnu.org/licenses/>.
//
//----------------------------------------------------------------------

namespace Linode;

use Linode\BaseLinodeApi;

/**
 * This class is autogenerated.
 *
 * @version Linode API v3.3
 */
class Account extends BaseLinodeApi
{
    /**
     * Estimates the invoice for adding a new Linode or NodeBalancer as well as resizing a Linode.
     * This returns two fields: PRICE which is the estimated cost of the invoice, and INVOICE_TO which is the date invoice would be though with timezone set to America/New_York
     *
     * @param   string  $mode        [required] This is one of the following options: 'linode_new', 'linode_resize', or 'nodebalancer_new'.
     * @param   integer $LinodeID    [optional] This is the LinodeID you want to resize and is required for mode 'linode_resize'.
     * @param   integer $PlanID      [optional] The desired PlanID available from avail.LinodePlans(). This is required for modes 'linode_new' and 'linode_resize'.
     * @param   integer $PaymentTerm [optional] Subscription term in months. One of: 1, 12, or 24. This is required for modes 'linode_new' and 'nodebalancer_new'.
     *
     * @return  array
     */
    public function estimateInvoice($mode, $LinodeID = null, $PlanID = null, $PaymentTerm = null)
    {
        return $this->call('account.estimateinvoice', array(
            'mode'        => $mode,
            'LinodeID'    => $LinodeID,
            'PlanID'      => $PlanID,
            'PaymentTerm' => $PaymentTerm,
        ));
    }

    /**
     * Shows information about your account such as the date your account was opened as well as your network utilization for the current month in gigabytes.
     *
     * @return  array
     */
    public function info()
    {
        return $this->call('account.info');
    }

    /**
     * Pays current balance on file, returning it in the response.
     *
     * @return  array
     */
    public function payBalance()
    {
        return $this->call('account.paybalance');
    }

    /**
     *
     *
     * @param   integer $ccNumber   [required]
     * @param   integer $ccExpMonth [required]
     * @param   integer $ccExpYear  [required]
     *
     * @return  array
     */
    public function updateCard($ccNumber, $ccExpMonth, $ccExpYear)
    {
        return $this->call('account.updatecard', array(
            'ccNumber'   => $ccNumber,
            'ccExpMonth' => $ccExpMonth,
            'ccExpYear'  => $ccExpYear,
        ));
    }
}
