<?php

//----------------------------------------------------------------------
//
//  Copyright (C) 2015 Artem Rodygin
//
//  This file is part of Linode API Client Library for PHP.
//
//  You should have received a copy of the GNU General Public License
//  along with the library. If not, see <http://www.gnu.org/licenses/>.
//
//----------------------------------------------------------------------

namespace Linode\NodeBalancer;

use Linode\BaseLinodeApi;

/**
 * This class is autogenerated.
 *
 * @version Linode API v3.3
 */
class Config extends BaseLinodeApi
{
    /**
     *
     *
     * @param   string  $Stickiness     [optional] Session persistence.  One of 'none', 'table', 'http_cookie'
     * @param   string  $check_path     [optional] When check=http, the path to request
     * @param   string  $check_body     [optional] When check=http_body, a regex against the expected result body
     * @param   integer $check_interval [optional] Seconds between health check probes.  2-3600
     * @param   string  $Algorithm      [optional] Balancing algorithm.  One of 'roundrobin', 'leastconn', 'source'
     * @param   integer $NodeBalancerID [required] The parent NodeBalancer's ID
     * @param   string  $check_attempts [optional] Number of failed probes before taking a node out of rotation. 1-30
     * @param   integer $Port           [optional] Port to bind to on the public interfaces. 1-65534
     * @param   string  $check          [optional] Perform active health checks on the backend nodes.  One of 'connection', 'http', 'http_body'
     * @param   string  $ssl_key        [optional] Unpassphrased private key for the SSL certificate when protocol is 'https'
     * @param   string  $Protocol       [optional] Either 'tcp', 'http', or 'https'
     * @param   string  $check_timeout  [optional] Seconds to wait before considering the probe a failure. 1-30.  Must be less than check_interval.
     * @param   string  $ssl_cert       [optional] SSL certificate served by the NodeBalancer when the protocol is 'https'
     *
     * @return  array
     */
    public function create($Stickiness = null, $check_path = null, $check_body = null, $check_interval = null, $Algorithm = null, $NodeBalancerID = null, $check_attempts = null, $Port = null, $check = null, $ssl_key = null, $Protocol = null, $check_timeout = null, $ssl_cert = null)
    {
        return $this->call('nodebalancer.config.create', array(
            'Stickiness'     => $Stickiness,
            'check_path'     => $check_path,
            'check_body'     => $check_body,
            'check_interval' => $check_interval,
            'Algorithm'      => $Algorithm,
            'NodeBalancerID' => $NodeBalancerID,
            'check_attempts' => $check_attempts,
            'Port'           => $Port,
            'check'          => $check,
            'ssl_key'        => $ssl_key,
            'Protocol'       => $Protocol,
            'check_timeout'  => $check_timeout,
            'ssl_cert'       => $ssl_cert,
        ));
    }

    /**
     * Deletes a NodeBalancer's Config
     *
     * @param   integer $NodeBalancerID [required]
     * @param   integer $ConfigID       [required] The ConfigID to delete
     *
     * @return  array
     */
    public function delete($NodeBalancerID, $ConfigID)
    {
        return $this->call('nodebalancer.config.delete', array(
            'NodeBalancerID' => $NodeBalancerID,
            'ConfigID'       => $ConfigID,
        ));
    }

    /**
     * Returns a list of NodeBalancers this user has access or delete to, including their properties
     *
     * @param   integer $NodeBalancerID [required]
     * @param   integer $ConfigID       [optional] Limits the list to the specified ConfigID
     *
     * @return  array
     */
    public function getList($NodeBalancerID, $ConfigID = null)
    {
        return $this->call('nodebalancer.config.list', array(
            'NodeBalancerID' => $NodeBalancerID,
            'ConfigID'       => $ConfigID,
        ));
    }

    /**
     * Updates a Config's properties
     *
     * @param   string  $Stickiness     [optional] Session persistence.  One of 'none', 'table', 'http_cookie'
     * @param   string  $check_path     [optional] When check=http, the path to request
     * @param   string  $check_body     [optional] When check=http_body, a regex against the expected result body
     * @param   integer $check_interval [optional] Seconds between health check probes.  2-3600
     * @param   integer $ConfigID       [required]
     * @param   string  $Algorithm      [optional] Balancing algorithm.  One of 'roundrobin', 'leastconn', 'source'
     * @param   string  $check_attempts [optional] Number of failed probes before taking a node out of rotation. 1-30
     * @param   integer $Port           [optional] Port to bind to on the public interfaces. 1-65534
     * @param   string  $check          [optional] Perform active health checks on the backend nodes.  One of 'connection', 'http', 'http_body'
     * @param   string  $ssl_key        [optional] Unpassphrased private key for the SSL certificate when protocol is 'https'
     * @param   string  $Protocol       [optional] Either 'tcp', 'http', or 'https'
     * @param   string  $check_timeout  [optional] Seconds to wait before considering the probe a failure. 1-30.  Must be less than check_interval.
     * @param   string  $ssl_cert       [optional] SSL certificate served by the NodeBalancer when the protocol is 'https'
     *
     * @return  array
     */
    public function update($Stickiness = null, $check_path = null, $check_body = null, $check_interval = null, $ConfigID = null, $Algorithm = null, $check_attempts = null, $Port = null, $check = null, $ssl_key = null, $Protocol = null, $check_timeout = null, $ssl_cert = null)
    {
        return $this->call('nodebalancer.config.update', array(
            'Stickiness'     => $Stickiness,
            'check_path'     => $check_path,
            'check_body'     => $check_body,
            'check_interval' => $check_interval,
            'ConfigID'       => $ConfigID,
            'Algorithm'      => $Algorithm,
            'check_attempts' => $check_attempts,
            'Port'           => $Port,
            'check'          => $check,
            'ssl_key'        => $ssl_key,
            'Protocol'       => $Protocol,
            'check_timeout'  => $check_timeout,
            'ssl_cert'       => $ssl_cert,
        ));
    }
}
